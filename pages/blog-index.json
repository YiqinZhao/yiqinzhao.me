[{"mdMeta":{"title":"重构 CODEN","date":"1553330409","category":"CODEN"},"abstract":"<p>经过了漫长的等待，终于重构好了一版新的<code>CODEN</code>，并且现在申请到了新的域名<code>yiqinzhao.me</code>，未来将个人相关的页面迁移到<code>yiqinzhao.me</code>。</p>\n","content":"\n重构好麻烦，写不动了。。。\n"},{"mdMeta":{"title":"写于22岁生日","date":"1530446400","category":"Life"},"abstract":"<p>2018年转眼过去一半了，这半年来发生了很多事。这篇文章开始与 2018年6月30日，今天晚上我做完了杂七杂八的许多事，修完了今天 USC 项目的 Bug，久违的让 WebStorm 升了个级，终于能坐下来思考一下自己了。</p>\n","content":"\n前半年，也可以说是本学期吧。忙来忙外的做了很多事情，开学以来真的很忙很忙，校内有 论文 和 社团，校外还要找实习，找租房。更重要的是 Toefl 和 GRE 还要处分，但遗憾的是，这两项至今还没有出分，只能拖到下一个阶段了。\n\n# 找实习\n找实习大概是从 3月 开始找的，因为要准备 G，整个找实习的过程说实话都没有好好准备，现在让我去写一下自己的面经我感觉自己都写不出来。拿到的人生的第一份 offer 来自 **猿辅导**，当时非常高兴了，因为工资给了很多，感觉比很多厂子的正式员工都多。因为暑假才能入职，后来回到学校之后还在找别的厂子，思考了这段经历感慨很多。有时候在冥冥中觉得这是我原本的命运：高中被大家叫赵老师，高考崩了来了个二本师范，毕业后来一家互联网教育公司做开发，拿一份中等偏上的薪水，过着互联网人们亚健康的生活，年纪大一点之后或许被裁掉，或许做个小经理。剩下的人生仿佛在拿到 offer 那一刻就能看透了。\n\n但是我觉得这学期以来我遇到了人生思想层面的重要转折，就在于我了解到了 **战神(God of War)** 这款游戏。接触战神是从寒假看黑桐谷歌的视频开始的，当时认识到了这个猛男游戏，觉得很棒，就补完了剧情。我是个粗人，不仅是个粗人，还是个世俗的人。我非常喜欢战神的核心理念，`不屈服于力量和命运，哪怕你面对的是神，也要把他干倒。`\n\n插句话，前些日子和好友交流，好友提到了一些把游戏当作艺术来欣赏的观点，并且给我讲了一些有这样执着追求的人的故事。说实话我是欣赏这种高尚的人的，但对我来说游戏的魅力在于他世俗的一面，每个人经过简单的学习都能了解到它的游戏操作，也能玩的津津乐道。我在游戏中更乐意与看到制作人传达的一种精神，并且也非常期待于通过游戏画面看到制作人在技术和艺术上的斗争与妥协，毕竟对于我这种天天在工程泥潭里挣扎的人来说，看到同行的执着也是鼓舞人心的。\n\n话说回来，战神这部作品给我带来的鼓舞是前所未有的，它甚至从根本上激发了我人生的斗志。而今年的战神4更是把内容刻画的深入。谈到了 **斗志** 与 **战斗**，这总是年轻人们津津乐道的话题。我拿了猿辅导的 offer 之后，后来又去面了美团点评，这大概是四月份的事情了，美团两面也过了，也拿了 offer。原本我以为春招就到此为止了，我也心满意足，后来又去面了狼厂，最后机缘巧合的也过了。这就让我突然觉得人生进入了另一条轨迹，我没有考到 985，也还只是个本科生，和北邮的同学一起面试最后也能拿 offer。\n\n**也许我们作为凡人，纵使心有神愿，身终无神力。自己编织命运之线可能做不到，但是给自己换一条还是可以的啊。可以说这是这次春招给我留下最大的印象了吧。**\n\n# 论文\n\nResearch 这件事是从大二下学期开始的，现在回忆起来也真是艰苦，刚开始的时候根本什么都不懂，也没有设备没有技术基础，算法都是拿着同学的显卡跑的。以至于刚开始的时候，我都不知道一个深度学习模型该用什么框架去搭建。\n\n一路边摸黑边摸鱼走到了大三上学期，和本校的一个研究生合作出了一篇成果，不过因为我自己的工作做的不是很足，导师的意见还是让我继续再出一篇论文。继续摸黑摸到了本学期，查了一堆资料，跑了一堆数据，现在终于出了成果了。现在形成两篇论文肯定不成问题，五月份抹黑投的 ICMI 原本都撤稿了，结果还是进入了审核，甚至现在 review 尽然还给人一种能中的感觉。不管咋样吧，这是好事。继续努力，今年下半年估计摸摸鱼也能中个C类会加一篇SCI，加上之前中了的成果，申请学校是肯定够了。\n\nResearch 做到现在我觉得变化最大的是 **心态**，其次是 **思维方式**。实验做不出来的时候真的是超级打击人，这个比 bug 改不出来可难受多了。其次思维方式的变化我觉得是会受益终身的，写过论文之后就会明白该如何科学的论证一个问题，如何进行实验，前因后果逻辑推断。逻辑这块真的太重要了，AI 正在快速落地，一些简单重复的工作很快就能被替代掉，反而优秀的逻辑未来会更吃香。\n\n# 项目\n\n这学期非常巧合的接了工大一个老师的项目，和 USC 建立了一些项目关系。这真的是意外的，其实是学院老师推荐过去的，接下了一个在线心理测试平台的开发工作，前中后台搞一套。到今天为止项目已经跟了三个月了吧，只有我一个人开发，和老师沟通也只是我自己。我感觉收获还是很多的，真正体会到了当代软件工程向前演进的感觉，写代码的时候仿佛捏泥人一样。\n\n整个项目经历了多次重构，为了让业务代码更清晰，构建了很多的基础代码，为了把组件化做好，抽象了很多东西，还把 Vue 全家桶用了个遍。能有这么一次经历确实还是很好。\n\n并且整个项目也非常需要沟通，不断的和甲方明确需求，检查测试。现在慢慢体会到，沟通的好能让自己少些很多代码。这个项目现在开发工作基本做完了，目前在打磨和修 bug，也混了一个 USC 的推荐信，很开心。\n\n# 社团\n\n本学期的社团其实做得挺不好的，因为实习面试没有组织几次活动。不过因为学校机房到位，和 Apple 方面算是正式建立了认证，并且在恒隆的 Apple Store 也办了活动，给孩子们买了同意的 t-shirt。总之慢慢的在走向正规，也选出了下一届的管理团队，我也算是退役了。今年的孩子们参加比赛的情况还不错，看着他们吵了半年的架，改了无数个需求和方案，从幼稚在走向成熟，还是蛮欣慰的。孩子们进了复赛，我还是挺看好他们的，努力努力进决赛应该不成问题，希望今年能比去年名次好。\n\n现在想起 Apple 给出的 iOS Club 理念，还挺感动的，果然人与人还是要信任，要合作，要共同进步。\n\n> Surround yourself with the dreamers and the doers, the believers and the thinkers, but most of all, surround yourself with those who see greatness within you, even when you don't see it yourself.\n\n尤其是最后一句，深有感触了。\n\n# 难以启齿的 TG\n\n本学期考了两次 G，第一次考了 310，第二次不负众望的只考了 300，真是丢人了。掐着指头算算离申请的日子也不远了，现在 TG 还是都差个10分左右，真是很难受啊。很无奈把这两项又拖到了人生的这个阶段，只能抓紧时间努力吧。\n\n> 6月30日，写到这了，11:40了。我爸这个老直男在看世界杯，我要睡了。\n\n7月1日，早晨起来吃了点东西继续写。大学三年以来 TG 都是心头一道坎，之前一直想的要早点考完，结果一拖再拖到了现在。越往下学越感觉难受，像是泥潭一样。记得五月底考上一次 G 的时候，快交卷的时候简直心态炸裂，满脑子想的都是终于考完了，考成啥也不继续考了。结果 GG，考的还不如上次，回来的路上快气死了，结果还被某人骂了一顿，太难过了。原本打算去优衣库买一件暴雪合作的 t-shirt 的，结果考崩了灰头土脸的就回去了。想必这么弱的我，是没有办法为部落，为女王效忠的。\n\n站在现在看来，上半年已经过去了，TG 也到了决战场，先顶着实习的压力学吧，如果不行的话，开学之后就溜了，专心学 TG。\n\n# 心烦的人际关系\n\n我不止一次的对我自己说过 **我讨厌人类**。和人打交道可真是太烦了，每每想到这些，就会想起家里的事情，感情上的事情，这些对我来说仿佛永远都处理不好，永远都是问题。\n\n我其实并不了解我的父亲，但我明显的知道，我的人生道路和他是截然不同的。未来出去读书几年，必然是要让家里花很多钱的，希望这笔投资是成功的吧，毕竟对于父亲来说，这是超出他能力范围的。\n\n其实家里还有很多事，还有些人的脸色要看，还有期待给我安排些工作。我要变强，我不要被他们控制。\n\n感情上更是稀里糊涂。上个月见了她一面，聊了很多，觉得她还是很好的。但是日子过起来还是经常磕磕绊绊，可能过久了就是这样吧。对于感情这件事，我真的是嗦不粗话，真的是太笨了。\n\n# 不知走向何方的人生\n\n这学期从找实习开始是我人生中第一次职业生涯上的迷茫，现在我面前的是一条通往开发岗的不错的路，也许我现在毕业了就去工作，也能拿到不错的工资，在北京慢慢的安个家。但继续往上读书一定是能有更好的机会，不过肯定是需要家里支持更多的钱，我也要花更多的时间。现在时间对于我来说变得十分苛刻了，家人在一天天老去，我在一天天长大，越来越多的地方需要靠我支撑了。其实有时候觉得那些整天吃喝玩乐的年轻人的人生也真不错，相比于他们，我的中年危机似乎来得太快了。\n\n读书读到这个节点上，我发现我终究不是一个能心无旁骛的天天写代码的人，我的家庭不支持我这么做，而且我自己也总有别的想法。很多北漂的人都是抱着在北京奋斗几年挣些钱然后回家过日子的想法，说实话我是认可的，北京确实压力大，不适合人生活。但是我真的没有任何兴趣再回山西来，每次放假回来都能深刻的感受到这就是个小城市，身边的人和事都是一天天的按部就班的进行，就连商业街都不怎么变化。\n\n对于我来说，继续做开发岗可以说是乐观的，每天过着互联网公司的作息，写写 JavaScript，看看 V8 的 bytecode，人生也是蛮好的。但对我来说还想继续上升，一进入公司人生似乎就进入了减速带，上升的机会越来越少，能学到的新东西也越来越少。这学期以来努力的发了篇论文，慢慢的做了一些 Research，感觉人生的下一阶段也多了种可能。而且随着年龄变大，也在考虑身体的能力，这学期请了教练，做了针对性的锻炼，感觉身体素质还是不错的。纵使我非常喜欢写代码，但我也不希望把大量的人生浪费在日复一日的工作上，毕竟那是拿钱买命的事情。往下继续学的话，我觉得更多的是要面对自己，突破自己的心态，从竞赛和数学的阴霾里走出来。加油吧，一个人最大的敌人就是自己。\n\n我发现我是个对环境和文化比较敏感的人，我也正在人生的路上摸着黑寻找着，目前看来回山西不是一个好选择。其实从高中开始，就有想过以后去美国定居工作的想法，并且大学以来一直都是在践行着。这条路大概率是在赌，我不知道地球另一端的世界究竟对我来说是怎样的，出国的同学们每个人都有自己的看法。\n\n时至今日，对人生也有了很多新的认识和看法，很多小时候相信的媒体上的说辞，现在也看透了，不信了。究竟怎样才好，只有自己经历了才知道。现在人生对于我来说像是一场扑克牌，一步一步的把手上的牌囤好，再一步一步的把一手好牌打好，哪块都可能出错，总之人生还要继续，照着目前的方向继续前进吧。\n\n明天就要去北京了，4号入职，人生的新阶段就要开始了，祝我好运吧。\n\n> 如果你看到了 NETWORK FAILED，恭喜你，这是正常的。Roost 在我迁移后端的时候挂了，懒得修。\n\n> **2018年10月6日更新**：如果你没有看到，那也是正常的，因为我重构了前端。懒得加 Roost 了，后期再说吧。\n\n"},{"mdMeta":{"title":"写于2017平安夜","date":"1514116800","category":"Life"},"abstract":"<blockquote>\n<p>注：本文较长，建议阅读时间 40分钟。</p>\n</blockquote>\n<p>转眼一看上一次写日志已经是 <code>2015</code>年的事情了，那还是我大一时候的事情。转眼间我已经读大三了，这两年经历了很多，简单在这里写写吧。这篇文章起笔于<code>2017年12月24日</code>，结束于<code>2017年12月25日</code>。</p>\n","content":"\n# 技术学习\n\n## 回顾我前两年的大学生活\n\n对，没错，我还是两年前那样无聊，就是喜欢研究编程技术。\n\n前两天我一直在想，我现在对技术的态度到底是怎样的。我现在认为，就按我现在这个学技术的热情，大概有几分`献祭`的意思吧。经商的人年轻的时候拿命赚钱，我们很多时候其实也是在拿命学技术。不过总体来说我还好，相比高中一些同学，我觉得我的压力不算太大，身体也没什么问题。以后希望能多锻炼身体，保持健康，现在已经开始坚持早起了。\n\n上了大学之后，我对技术几乎是痴迷的。我客观的评价一下我的过去吧，我高考考的不好，高中学习也不好。但我上高中之前我都是好学生，心里或多或少有些不肯认输的`优越感`。上了高中之后成绩非常差，当时真的没法接受自己这样的成绩，三年高中有的时候真的很痛苦，脾气磨薄了许多，也渐渐的也看淡了一些东西。慢慢的也认识到自己在考试成绩上真的是比不过别人。\n\n我之前总结了一点，`一个人如果不够强，很有可能是因为他不知道自己有多弱`，高中时的我自己迷茫而消极。被压力冲昏了头脑，加上有些叛逆的情绪，导致不能正视学习这件事。我那时觉得`高考`好像并没有什么用，我的才华不适合用在高考上。现在回想起来，这里面或多或少有些骗自己的意味，骗的是那颗`骄傲的心`。然而上了大学之后，心里有一口气一直顶着，那就是**我技术上一定要比别人好**。\n\n原因也很简单，我从小到大，在同龄人里没见过电脑技术比我好的，甚至比我大一些的人也没有比我技术好的。这点上我觉得我和我的~~前~~女友是非常像的，我们心里有一股傲气，都执着地成长着，但也在竞争激烈的环境里迷茫着。然而我最后找到了我擅长的东西，我能比别人做得好的东西，而她没有，至少现在还没za有。\n\n我现在回顾看来，其实人生真的就是`机遇`和`选择`铸就的，并不一定谁比谁智商高，或者天赋好，很多时候一个选择可以决定今后很重要的人生走向。我觉得我有很多同学，他们有着非常好的性格，非常扎实的功底，非常聪明的头脑，但是却对未来充满迷茫，专业课上也毫无建树。如果让他们来按照我的路，重走一遍我的人生，我觉得他们肯定会比我走的更精彩。但遗憾的是，这并没有发生。\n\n不过我相信一点，`越努力越幸运`。有句话说得好：`人间正道是沧桑`。机会永远是留给有准备的人的，努力充实自己不会有错，不仅是技术方面，而是各个方面，这样在机会到来的时候，才能抓住。\n\n## 人间正道是沧桑\n\n其实回头看看我这两年来走过的路，还是很不容易的。很多时候，我要做的事很多，DDL 很紧，我都觉得我这是在给自己找罪受。但是坦然的走过这一切之后，我还是觉得很值的。我不是个坚强的人，但我的内心仍是个战士，能够在我热爱的领域挥洒热血，再累我也觉得值得。关于我性格和人生的一些感悟，欢迎大家再去看看我的另一个文章：`我是个爱玩游戏的男孩`\n\n## 技术的变迁\n\n大一，大二的时候我如鱼得水一般全身心的投入到了技术学习当中。那个时候我真的希望我把所有的技术都学会，都弄懂。但是由于一些历史原因，我很抵触数学，也很抵触那些理论性强的东西，比如`机器学习`。那时我主要的学习内容都是`开发技术`，前端后端，操作系统，可谓南征北战都有所涉及。在大学里我做到了出色，做到了优秀，也就是当我得到了这一切之后我才慢慢的看清了我为什么在高考面前那么弱不禁风。\n\n大二下半学期以后，我进入到了我校的研究生实验室，参与了一些科研工作。主要研究领域还就是涉及到`机器学习`和`深度学习`。 当时抱着尽力而为的心态参与了实验，做了一个多学期之后，现在终于形成了论文，马上就要投稿了，在这里希望能早日投出去。其实当时我参与科研的主要目的也就是论文，因为这会帮助我申请国外的 master 。但现在看来，我收获的远不止论文。\n\n## 东施效颦\n\n除了科研工作我还有`大创`的项目，还有`移动应用创新赛`的项目，还有学院内的项目。大创的题目就是跟着实验室的研究内容走的，偶尔需要提交些材料，做些报告，难度倒是不大。不过今年移动应用创新赛的项目做了巨大的创新和改进。学习的过程是痛苦的，不管是做研究还是带领团队做项目，都需要不停的学习新的东西。我觉得去年的我自己，不仅像东施一样在学西施的`神态`，而且还天天给自己`化妆`，希望自己长的像西施一样。这种学习的过程是痛苦的，但所幸它不是无效的。\n\n### 移动应用创新赛\n\n> 注：移动应用创新赛是 Apple 和中国教育部以及众多高校联合举办的高水平计算机创新类赛事。比赛鼓励同学将自己的创意付诸实践，开发移动应用程序解决一些切实的社会问题。目前已经举办了两节，今年还吸引了来自港澳台地区的学习和学生参赛。\n\n我去年也参加过一次移动应用创新赛，`迷迷糊糊`的拿了三等奖。我自己很高兴的，从某些层面来讲，今年我希望复制自己的成功。我带了新的团队，从大二上学期开始，大家一起学，一起比赛。这中间也经历了一些人员的变化，不过更具有挑战性的是应用的选材。去年参赛之后见识到了一些非常有创意，非常奇妙的点子和作品。和这些作品比起来，我觉得我做的东西太简单粗暴了。回来我反复的思考，如何提升自己，如何把创意和技术结合，去切实的解决问题。\n\n综合考虑了很多之后，我以当时仅有的技术提出了要去从零开始学 iOS 技术，从零开始做心理学相关的应用。以今天的眼光看来这真是疯了，但当时不知道什么给了我勇气，让我去做这些。刚开始学习的时间，我真的可以用`东施效颦`这个词来形容自己，就是简单粗糙的模仿着大佬们的做法，用自己匮乏的知识去做那些高大上的东西。结果也可想而知，我们的应用很多地方做的很奇怪，很不和谐。但是软件这个东西本身就是通过不断的改进才慢慢变好的，我们团队在开发过程中也经历了非常多的革新。\n\n索性我们坚持下来了，今年在比赛水平整体变高，参赛人数明显争夺的情况下，我们还是拿到了总成绩并列全国第十的三等奖。并且除此之外我看到的更多的是整个团队的成长，我觉得，够了。\n\n### 科研工作\n\n科研工作对我来说更是一个极具挑战性的东西。在对未知领域的探索中，我突破了我的安全区。从以前不愿学理论，不敢学数学，到现在坦然的接受了这些。这中间的我很多时候都是挣扎着去学，研究问题时很多时候不仅要反抗自己固有的思维、知识甚至还要和人性里懦弱和黑暗的部分作斗争。关于我对人性的研究，大家可以去看看我的另一篇文章`Diablo`。\n\n我校实验室刚组建不是很久，很多地方都刚刚起步，最重要的是，技术方面没有储备。这对于我来说无疑是件坏事，但也应了那句话：`乱世出英才`。正因为这样大家起点相同，几乎是一起开始学习，一起开始进步。导师有个制度，就是每周汇报，我还记得我第一次做汇报的时候说的话：`我不懂那些数学公式，我给大家分享一些工程上的经验吧。`很显然，我去了一个我完全没有涉及过的领域，而且还是我之前害怕的领域。在研究科研问题的时候，唯一能让我安心的，就是我可以用代码来解决问题，我可以`写代码`，尽管我不知道我用的大多数的函数是干嘛的。\n\n现在返回头去看看我每次做汇报的 Keynote，确实是个不断进步的过程。每次上台讲的时候我真的觉得用`东施效颦`这个词来形容再合适不过，模仿着别人的思维和口气去说另一个世界的东西，只有我自己感觉好像自己就是那个世界的人。\n\n我深知自己知识能力上差很多，不过从一开始完全不了解，到水过地皮湿的了解一点皮毛，到现在水过地皮和稀泥的多了解了一点点，我还是成长了很多。我觉得收获最大的不是知识，我现在甚至不敢说我在科研方面了解了`1%`，但是对于我来说真的是`心态`和`学习方法`有了一个基础的建立。以至于我现在能够平静的去拥抱`深度学习`和`数学`的许多知识，我甚至在给自己准备读`PHD`的计划。在学习数学、机器学习、深度学习的过程中我也收获了很多，做了很多思考。这里也欢迎大家去看我的另一篇文章，`深度学习`\n\n在这一年的奔波忙碌之中，我匆忙的效仿着更强的力量，凭借自己弱小的心智和知识去驾驭那些强大的技能。而令我最欣慰的一点是，我在和这些力量一天天的相处过程中，他们在同化着我，也就是说，我在一天天的变得更好，变得更强。\n\n现在的我已经把 GitHub 上自我介绍的部分改了，曾经我写着：\n\n> Student. Most time work on front end development. Many hobbits, love linux, Node.js is useful, Golang is my dishes.\n\n而现在是：\n\n> Hawkins Zhao, undergraduate student major in software engineering. Converting from a developer to a computer scientist. Calm down and carry on!\n\n我还需要更多的`Convert`，各个方面，希望这样的节奏能继续保持下去，`Calm down and carry on!`\n\n# 感情经历\n\n我的一位同学曾和我说过这样一句话，他认为`夫妻关系是人生中最重要的一段关系，毕竟妻子是真的陪伴你走完人生的`当时我听完后，深以为然。今年经历的一个很重要的事情是感情的变故，女友的离开对我来说是个非常重要的事情，对我来说我的生命中少了一个很重要的存在。\n\n曾经我很害怕她走，因为她走了之后我只能孤身一人去面对很多问题。~~举个例子：我和谁去看电影。~~ 但是我有些时候，又是希望她走的，因为我觉得只有那样我才能独自去面对问题，去成长。她走了的这些日子，我一点一滴的在经营着自己的生活。\n\n我还记得她最后一次来工作室的场景，我送走了她，她将不会回到工作室，可能也永远不会回到我身边。道别之后，我翻过了她桌子上写着`又要干活了`的工牌。工牌反面写着`终于干完了！`，是的，这一切都结束了，我摆了一只花在桌子上，如同送别昔日的战友一样，但只有我知道，我送别的是那段吸满了`血`与`泪`的感情。而此刻这段感情啪的摔在了地上，我眼前只剩下一个是深红的世界。\n\n这一次她真的走了，我以后的生活彻底的留给了我自己，无论愿意与否。\n\n# 心智成长\n\n## 一个人的生活\n\n没错我现在需要一个人去面对很多事情，我并不反对这一点。从小我就不是个爱和人相处的人，所以现在这样我感觉也没有太不适应。我承认我女友影响了我很多，尤其是性格方面，还有很多的处世态度。现在的我有了一套新的处世法则，我在一点点的去实践，去探索。\n\n大学是一个人心智飞速成长的时期，我认为我大学三年每年的心智都不一样，每年都会变化很多，人就是这么神奇。我尝试着用自己的思维去和老师们沟通，去和团队沟通，去做产品分析，去管理运营社团。我走出了太多之前自己不敢踏出的舒适圈，有时心里也是抱着一股`不愿承认自己弱`的心态来做这些事的。\n\n## TJNU iOS Club 的成立\n\n> 注： iOS Club 是 Apple 官方举行的校园活动，意指以社团的形式帮助高校学生学习 iOS 开发技术，并鼓励同学们编写自己的 iOS 应用程序。每年 Apple 官方都会举行面向全国高校学生的 iOS 开发夏令营/冬令营，这其中绝大多数同学都是来自全国各个高校的 iOS Club 的学生。\n\niOS Club 的成立算是本学期干的一个不大不大的事吧。其实我一开始对成立社团是`抵触`的，因为我觉得，大三会比较忙，而且 托福 和 GRE 需要出分，再去办社团的话肯定会分散时间分散精力。不过在后来的参加`夏令营`和`移动应用创新赛`的过程中还是非常期待我们学校也能成立一个这样的社团。\n\n今年的夏令营是在`广东`举行的，正如大家所知，一个开放多元的城市；而今年的移动应用创新赛是在`杭州`的`浙江大学`举行的，同样浙大也是个开放多元的学校。作为一个土生土长二十多年的北方人我得很客观的承认一下，南方确实思想上更活跃，也更鼓励多元的文化。北方这边的高校很多都很刻板。在计算机这种新兴行业上，南方的高校显得更有活力。\n\n参加夏令营和比赛的过程中也接触到了其他学校的很多同学，而且最重要的是我觉得这个走出学校的机会很难得。回来的时候我和我们团队的另一个同学在讨论是否要成立我校的 iOS Club ，他倒是爽快的一口答应了。当时我心里觉得他有几分天真，可能没有好好考虑需要付出什么。不过转念一想，年轻气盛，有这样的机会为什么不去尝试呢？同样社团活动也能给申请稍稍的加分一下，顺便还能挑战一下我女友的那句话：`大一大二不参与社团活动，你大学基本就没有机会了`。\n\n于是怀着这样一个矛盾而复杂的心态， TJNU iOS Club 成立了。更多的内容，我今后会在别的文章内提到。\n\n## 逐渐繁荣的工作室\n\n随着工作室空调的到位，这里也聚集了越来越多的同学。回想当初，我刚来工作室的时候绝大多数时间只有我自己和我女友。冬天冷，夏天热，哎，也是让她受苦了。\n\n现在的工作室不一样了，15，16届的同学有很多。目前我们也在引导一些17届的同学入驻，我是作为一届老人，我是很希望看到这样的场景的，希望以后学院可以越来越好，技术好的同学可以越来越多。\n\n而我现在有点莫名其妙的成为了这里的`Leader`，至少大家遇到问题经常来找我，而且工作室的一些日常管理也是由我牵头。我不是个好的领导，我不喜欢和人交流，也不会做人际工作。所以这件事情让我有点受宠若惊，但是生活还要继续，所以我也就保持着这个节奏在一步一步的往前走。同样作为 iOS Club 的社长，在管理上我也动了些脑子。希望能够把这些事做好一点吧。\n\n做好自己的事，成为更好的人。也许我正在从一个小的程序员，走上一个更高的台阶，做个`Leader`的存在。\n\n# 新年许愿\n\n1. 家人平安\n\n2. 善待感情\n\n3. 培养个锻炼身体的计划\n\n4. 搞定托福，GRE\n\n5. 走出学校，去更好的地方，认识更好的人\n\n6. 保持对技术的热情，保持年轻的心态，继续战斗\n\n7. ~~去走一次一个人的旅行~~\n\n   > 2018年1月12日：已经完成了，去了济南。并不能 get 到一个人旅行的乐趣。。\n\n# 结语\n\n这就是我的`2017`，奔波，忙碌。我遇到了很多事，也成长了许多，我也越发的感觉自己，真的在成长。\n\n感谢主一直以来对我的恩泽，希望主在今后的道路上继续指引我，也祈求主赐予我力量，让我去守护那些爱我呵护我的人。阿门。\n"},{"mdMeta":{"title":"我是个爱玩游戏的男孩","date":"1514116800","category":"Life"},"abstract":"<p>现在是 2017年12月，我上个月刚考完第一次托福，这个月简直精疲力竭，颓废了几周，然后期末还有一些杂七杂八的事情需要处理。</p>\n<p>但是总的来说不是很忙，这也难得的给了我一些休闲和思考自己生活的时间。这先天来我抽了些时间去 B 站上看了<code>魔兽争霸</code>，<code>星际争霸</code>和<code>魔兽世界</code>的剧情解说。我从小就是玩电脑长大的，评论起这些游戏简直如数家珍，而且我也是个忠实的暴雪粉。</p>\n<p>那么说到这里了，就先来谈谈我个人对游戏的一些看法吧。</p>\n<p>「<strong>未完待续，没想到一写就写这么多</strong>」</p>\n","content":"\n# 儿时的回忆\n\n各位看官可听了别笑，电子游戏在我成长中扮演了重要的作用，或者说直接影响了我的人格形成。小的时候我玩`魔兽争霸`，第一眼就被它的剧情吸引了。当时觉得这个游戏好厉害，竟然让反派（阿尔萨斯和巫妖王）最后获胜了，而且整个过程还是由我们玩家来完成的。真厉害！\n\n小的时候不懂事，本能的觉得「**长得丑**」就是邪恶的，或者说，就是坏人。而整个`魔兽争霸3-冰封王座`的故事就是讲了堕落王子`阿尔萨斯`和`巫妖王`肆虐艾泽拉斯的故事。长大一点之后，慢慢认识到了 **人不可貌相**，而且这个世界上 **没有绝对的正义，也没有绝对的邪恶**。回头想想小时候玩的游戏，也许`阿尔萨斯`从某一方面讲，也是正义的吧。\n\n# 长大之后\n\n由于魔兽的剧情太复杂了，很多人玩第一次，或者说玩几个月都不一定能了解到其中的人物关系和历史背景。我当时也一样，很多时候只是为其中精心设计的人物和情节所震撼。\n\n可能也是随着年龄成长，心智有所成熟。这些日子我重看魔兽剧情之后很多细节才慢慢明白，里面的很多道理也才慢慢体会到。当年的`阿尔萨斯`就是一个堕落王子，他亲手屠戮了他所统治的洛丹伦、奎尔萨拉斯、诺森德，无数地方的无数生命，却就像他自己说的一样，对此毫无感觉，毫无怜悯之心。这点看清之后我还是有些震惊的，原来我当年控制的这个角色，干了这么多伤天害理的事，也许这是一种绝对的邪恶？\n\n## 绝对的邪恶\n\n「**绝对**」这个词在我二十多年的人生中是非常罕见的。\n\n## 平衡\n\n说到这个词，就很有意思了。如果你对比着看过东西方哲学的话，你肯定会发现一个共同点，就是对**平衡的追求**\n\n**平衡**，科学一点也可以叫**稳态**，顾名思义，一种稳定的状态。我们就拿其中最有趣的一点讲，就是**东西方哲学中如何达到平衡状态的讨论**\n\n东方人，我们东方人，是受佛教文化比较大的，而且中国这片土地，以及受中国文化影响大的地区，自古讲究「**和**」。如果你是个修仙爱好者的话，肯定明白，中国文化里的那些「**高人们**」，往往都是通过刻苦，隐忍的修炼所达到的，而修炼中最重要的一环是「**修心**」。\n\n修心，修什么？修的是心平气和，处事不惊。而这一点，本身就是一种稳态，这些「高人们」企图通过修炼，达到自己内心的一种平衡，拥有了这种平衡的状态，就能解决许多的问题，或者战胜无数的敌人。其实话说回来，最大的敌人，还是自己，「**心浮气躁，屡战屡败；心平气和，战无不胜**」\n\n这种对平衡的定义在自古以来的社会形态中也有明显的体现。例如社会不期望人们进行太过极端的行为，不鼓励经商，鼓励科举，鼓励读书，鼓励以隐忍获得自身的修炼。这些哲学都是没错的，我们始终要相信一点：「**能够在这片土地上高高升起，并世代飘扬的哲学观点，都是好观点**」\n\n可能这里面有些东西我们以今天的眼光来看，**并不合适**，就比如「**隐忍**」。但这背后主要是时代变迁的问题。\n\n我们这时候来反观一下西方人对平衡的追求："},{"mdMeta":{"title":"Tensorflow 历险记","date":"1481544000","category":"Tensorflow"},"abstract":"<p>本文讲记录我在使用<code>Tensorflow</code>时遇到的种种坑,方便大家踏平这些坑。说实话，我现在有点相信曾经听说过的一位程序员大神说过的一段话：</p>\n<p><strong>大型的开源软件都有一个特点，就是 clone 下来永远不能按官方的文档编译出来。</strong></p>\n","content":"\n我要事先声明，我是并不懂`深度学习`的原理的，那些复杂的公式我根本看不懂。但是我很确信我能够把相关的软件配置起来，这可能是源于一个工程师的自信。尽管我有自信这么说，但我还是得承认，Tensorflow 还是一个比较讨厌的软件。\n\n# 搭建平台\n\n我在两个硬件平台上编译了带 GPU 支持的 Tensorflow，即 `CUDA 模块`。CUDA是英伟达的显卡技术，在 Tensorflow 里可以有效的加速神经网络的学习过程，如果您的电脑配备有 N卡 那我推荐您像我一样，编译 GPU 支持。\n\n**硬件平台1**\n显卡：GTX 660\n操作系统： Mac OS X 10.11 El Captain\n\n**硬件平台2**\n显卡：GTX 960M\n操作系统： Ubuntu 16.04 Xenial Xerus\n\n要注意的是 CUDA 的计算性能在不同的硬件之间差距是很大的，详细信息可以在 英伟达 官网看到。以我的经验来看，960M 是要远远好于 660 的。\n\n# 编译过程\n\n网上有大量的资料，包括 Tensorflow 的官方文档都有 GPU 支持的编译帮助，在这里我就不重复了。我在这里列出一些我参考的资料。\n\n[教你从头到尾利用DL学梵高作画](http://m.blog.csdn.net/article/details?id=52658965)\n\n[Tensorflow 官方文档](https://www.tensorflow.org/versions/r0.11/get_started/index.html)\n\nMac 和 Ubuntu 的编译方式大致是相同的，Mac安装软件更加友好，`cuda toolkit`是一个`pkg`文件，直接双击安装就好。\n\n下面开始列举遇到的种种问题：\n\n### Mac - libcudart.8.0.dylib\n\n这个错误是在 Mac 上编译的时候遇到的最坑人的问题，GitHub 上有很好的解决方案：\n\n[GitHub](https://github.com/JimmyKon/tensorflow_build_issue_fix)"},{"mdMeta":{"title":"优雅的Python环境搭建-Windows","date":"1479211200","category":"Python"},"abstract":"<p>近期帮助女票的在她的 Windows 电脑上安装 Python，其实原本这就是一件特别简单的事情。但是介于她是个研究 <code>Computer Science</code> 的人，而且可能用诸如 <code>Hadoop</code>这样的神奇工具，我决定还是得用个 Linux 环境，那怎么办，装Linux？不，我们要<code>优雅</code>、<code>稳定</code>，<code>Linux Friendly</code>。</p>\n","content":"\n## 工具链列表\n\n**操作系统**：Windows 10\n**工具链**：VirtualBox，Vagrant，Ubuntu 16.04，Python 3，Cmder，zsh，oh-my-zsh，PyCharm\n\n## 安装配置步骤\n\n1. 下载并安装工具链中所有软件\n2. 启动 PyCharm 配置远程调试，参考 JetBrain 的[这个文章](https://www.jetbrains.com/help/pycharm/2016.2/remote-debugging.html)\n3. 文章沿着以下顺序进行：\n-> Using a remote interpreter\n-> Make sure that a remote interpreter is configured\n-> Configuring Remote Interpreters via Vagrant\n4. 新建项目，注意，项目目录一定要在 Vagrant 的文件夹下，这样才能和虚拟机内的文件系统交互。\n\n\n## 效果\n\n* Python 远程调试稳定正常，**支持断点**\n* SSH 稳定，响应速度快，系统睡眠唤醒后 SSH Session 不会断开\n\n* **坑**：在 PyCharm 内置环境中调试 Python 时，输入文字会再次显示一遍，目前还没有发现问题原因。\n\n"},{"mdMeta":{"title":"Web开发入门","date":"1477310400","category":"Guide"},"abstract":"<blockquote>\n<p>开发体验课专版</p>\n</blockquote>\n<p>这篇文章将介绍 Web 开发入门时需要注意的事项，涵盖<code>环境搭建</code>，<code>参考文章</code>，<code>技术介绍</code>等。</p>\n<p>文章主要介绍<code>静态网页</code>，也有少许<code>动态网页</code>的内容。<code>动态网页</code>属于超过开发体验课要求的内容，有立志于获奖的同学，建议学习。</p>\n","content":"\n# 环境搭建\n\n## 什么是开发环境\n\n> 工欲善其事 必先利其器\n\n想做个伟大的实验，有个高效的工作台是很重要的，做开发也一样。\n\n开发环境简单来说就是指的开发人员在开发过程中使用的包括操作系统在内的一系列工具。开发人员对这些工具的掌握程度和熟悉程度都会影响开发的速度和质量，所以花一点时间配置一下自己的电脑是很重要的。\n\n## 推荐环境\n\n* **计算机：** 这里首推 Apple 的`MacBook`，最好的型号是`MacBook Pro 13寸`. 如果还没有买电脑的同学可以再等等，Apple 2016年10月底会发布新品，到时候再选购。具体原因将在下面阐述。\n\n* **操作系统：** 如果你在使用`MacBook`，那么请千万不要在`Windows`下做开发。如果你购买的是预装`Windows`的电脑，那么也不要担心，后面会有环境搭建的相关指引。\n\n## 环境搭建\n\n### 为什么要推荐 Apple 电脑\n\nApple的操作系统`macOS`理论上是只能运行在 Apple 的计算机上的，而`macOS`是基于`UNIX`操作系统的。从开发角度上讲，`UNIX`比`Windows`要友好许多。\n\n并且，迄今为止，`macOS`也是唯一稳定可靠，学习成本低，并且适用于绝大部分情况的类`UNIX`系统。\n\n也许在学习的初期还不能切实的体会到`UNIX`系统的便捷性，但是当大学四年足够你学会很多东西。电脑这东西也不便宜，用起来也不可能经常换，所以还是那句话：`工欲善其事，必先利其器`。\n\n### 必备软件\n\n初期学习阶段系统是基本没有差别的，这些软件 `Windows` 和 `macOS` 都有，下载地址在下方。\n\n- **代码编辑**：Sublime Text 3 或 Dreamweaver (推荐前者)\n- **图片美工**：Photoshop\n- **浏览器**：Google Chrome\n\n#### PHP动态网页需要\n\n- **[XAMPP](https://www.apachefriends.org/index.html)**\n\nPHP 是动态网页，属于超过开发体验课的内容，若有立志于获奖的同学，建议学习。\n\n# 资源\n\n## 软件下载地址\n\n* **dreamweaver**: http://www.cr173.com/html/68172_1.html\n\n* **sublime text 3**: http://www.sublimetext.com/3\n\n* **Chrome浏览器**:  http://rj.baidu.com/soft/detail/14744.html?ald\n\n* **XAMPP**: https://www.apachefriends.org/index.html\n\n# 慕课网资源\n\n**以下内容推荐按顺序学习**\n\n[快乐的sublime编辑器](http://www.imooc.com/learn/333)\n\n[前端开发工具技巧介绍—DW篇](http://www.imooc.com/learn/39)\n\n[HTML+CSS基础课程](http://www.imooc.com/learn/9)\n\n[JavaScript入门篇](http://www.imooc.com/learn/36)\n\n[前端入门-HTML/CSS/JS基础](http://www.jianshu.com/p/f12c91bf56b7)\n\n[前端工程师必备的PS技能——切图篇](http://www.imooc.com/learn/506)\n\n[PHP入门篇](http://www.imooc.com/learn/54)\n\n\n# 参考文章\n\n[最全前端知识体系](http://www.jianshu.com/p/966a4cc8f87a)\n\n[前端开发入门书籍参考](http://www.jianshu.com/p/24ed27883574)\n\n\n# 其他资源\n\n这里给大家提供两个非常简单的页面例子和一本非常好的书，`编写高质量代码--Web前端开发修炼之道`\n\n[点击下载](https://cloud.coden.hk/index.php/s/j0pNxixWd3E25ly)\n"},{"mdMeta":{"title":"记 CODEN 上线","date":"1463659200","category":"CODEN"},"abstract":"<p>经过了很长时间的折腾，挑来挑去用了各种框架，各种工具，终于把<code>CODEN</code>的第一版本release出来了，尽管有很多地方还并不满意，但是作为一个有纪念意义的时刻，还是应该感慨一下的。</p>\n","content":"\n# 经过\n\n终于，经过了半年的重构、学习、知识整理，`CODEN`的第一个版本上线了。途中历经了许多次变更，最初使用`Angular`编写，后来使用`React`，最后还差点使用了`vue`。但是这些前端`MVC`框架都有一个严重的问题，就是极其复杂，开发周期较长。我在开发的过程中使用过一些，最后也大部分放弃了。\n\n现在我使用的是`hexo`，并且使用了主题，大部分都是现成的代码构建的，我必须承认，这样虽然不`geek`，但是效率还是不错的。不过我现在用了一段时间以后还是觉得作为前端开发者的个人博客，不玩出点花来，实在是不能令人开心。所以现在依旧打算重新构建一套基于`MVC`的单页博客系统。\n\n也正是因为在技术上的一些纠结原因，`CODEN`上线以后我也没有宣传，没有朋友圈没有说说，微博也没有发。说到底我还是对这个版本不够满意，技术上讲，我期待的样子是一个优雅的单页应用，所以，可能等到下一个版本也就是重构成功后，我才会宣传它。\n\n**2018年10月4日：修正了 CODEN 的正确写法**\n"},{"mdMeta":{"title":"Linux 折腾总结","date":"1456660800","category":"Linux"},"abstract":"<p>从放假前到假期结束，我的主要精力都在研究Linux操作系统上，以下内容，是我在这个过程中的一些收获和经验。\n<strong>注：未完待续</strong></p>\n","content":"\n> March 10, 2019 修复了一些错误的 markdown 标记用法\n\n# 导论\n\n我们通常指的Linux系统其实是Linux的 `发行版`，比如知名度非常高的Ubuntu系统。但是Linux本身只是指的 `操作系统的内核`，关于 `内核`、`发行版` 这两个词，会在后面的章节中讲到。\n\n理论性和历史性太强的东西在这里也不去解释了，具体可以看百科。而这篇文章所希望是我通过自己的实践经验和知识，向大家分享关于Linux的种种知识，以便让更多人接触、了解、学习Linux。\n\n# 理论篇\n\n## 什么是 Linux\n\n> Linux（英语发音：/ˈlɪnəks/ lin-əks）是一种自由和开放源代码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布。在加上用户空间的应用程序之后，成为Linux操作系统。Linux也是自由软件和开放源代码软件发展中最著名的例子。只要遵循GNU通用公共许可证，任何个人和机构都可以自由地使用Linux的所有底层源代码，也可以自由地修改和再发布。大多数Linux系统还包括像提供GUI的X Window之类的程序。除了一部分专家之外，大多数人都是直接使用Linux发行版，而不是自己选择每一样组件或自行设置。\n严格来讲，术语Linux只表示操作系统内核本身，但通常采用Linux内核来表达该意思。Linux则常用来指基于Linux内核的完整操作系统，包括GUI组件和许多其他实用工具。由于这些支持用户空间的系统工具和库主要由理查德·斯托曼于1983年发起的GNU计划提供，自由软件基金会提议将该组合系统命名为GNU/Linux，但Linux不属于GNU计划。\n\n以上是[维基百科](https://en.wikipedia.org/wiki/Linux)中对于Linux的解释，首先我来做一些简单的解释。\n\n从操作系统的概念上来看，Linux属于操作系统的内核，并且它是一种被广泛使用的宏内核。实际上，世界上以Linux为内核的设备远远多余运行windows、unix、os x的设备的总和。例如常见的路由器、服务器、智能家具、机器人等等设备，你可能看不到它们在运行，但是它们大都有一个Linux内核安静的躺在内存里，保障着系统的运行。\n\n但是我们常常听说的是：某某人正在用Linux系统，某某服务器用的是Linux，而且还常常听见什么Ubuntu之类的词，那么它们是什么呢？\n\n很简单，这些指的是机遇Linux内核定制的系统，它们往往由各种各样的社区或者公司维护，可以安装到PC机或者Mac机上，它们被称为`发行版`关于发行版的问题会在后面的章节中提到。\n\n还有一个问题，就是Linux这个单词怎么读？有这样一句话说的非常好：\n\n    Linux是自由的，它的发音也一样。\n\n所以不需要纠结这个单词怎么读，实际上，世界各地的人的读法奇奇怪怪各种都有，就算在美国一个国家内，大家的读法也不统一，东海岸西海岸的读法都不同。\n\n## Unix Linux Windows\n\nlink\n\n\n\n## Linux桌面发行版特点\n\n### 什么是发行版\n\n因为发行版众多，而且常常很相似，所以在这里首先给出wikipedia上的介绍，我就不赘述其细节了，我会在之后的介绍时抓住几个特质：`家族特征`，`版本特征`，`使用体验`。其中关于家族特征会介绍的详细一些。\n\n### Debian\n\n> Debian (/ˈdɛbiən/)[2] is a Unix-like computer operating system that is composed entirely of free software, most of which is under the GNU General Public License, and packaged by a group of individuals known as the Debian Project.\n\n以上是 [维基百科](https://en.wikipedia.org/wiki/Debian) 中的Debian。\n\n如果你观察仔细的话，按照目录的解构很容易看出来，Debian不仅是一个发行版，更是一个家族。实际上，有一部分原因是因为Debian是一个比较古老的发行版，它的`Initial Release`的日期是`1993年`，而且一直以来以稳定可靠著称。所以后来很多其他的发行版由于商业原因或者开发成本的考虑，是基于Debian的，比如著名的Ubuntu。也就是因为其影响力巨大，现在流行的Linux二进制软件包就有一种`.deb`格式，著名的Ubuntu用的就是这种格式。\n\n下面针对之前的三个要素说明一下，Linux系统中系统稳定性主要依赖于其发行版的上游软件质量，其bug数量直接会作用于系统稳定性。\n\n**版本特征**：有三个主要版本：`Stable`, `Testing` 和 `Unstable`.采用固定版本号更新的方式，大的版本之间不能直接更新，多数情况需要重装系统，但是也有像 `apt-get dis-upgrade` 的方法。\n\n**家族特征**：Debian系（蝶系）的**鼻祖**。\n\n**使用体验**：Stable版的非常稳定，代码仓库很丰富，尤其是有大量的第三方包。而且提供了完整的本地安装方案，目前官方一共提供十八张DVD容量的安装文件，包含全部软件，不需要网络就可以安装官方提供的任何软件。但缺点是软件版本稍微老一点。\n\n#### Ubuntu\n\nConnonical的核心产品，如果最流行的发行版之一，我相信大多是人都听说过它。我们必须承认，它是目前最好用的`开箱即用`的Linux发行版。Ubuntu的哲学是：\n\n`Linux for human being.`\n\n而在目前看来，它也很好的实现了这一点，我们得承认，从安装开始，Ubuntu就远超很多其他发行版。并且在软件方面，除了Connonical提供的官方软件源外，还有非常非常多的其它软件源，比如PPA（Connonical提供的一个方便用户分享自己的Ubuntu软件的平台）。\n\n另外ubuntu最致命的一个杀手锏就是凡是与Connonical有合作的硬件厂商大部分都提供一些硬件的`私有驱动`，这是非常非常关键的，因为驱动的安装是比较麻烦的一件事。而ubuntu提供的图形化安装流程是无痛且安全的，例如英伟达的显卡驱动打个够点个apply等一会就安好了，这在很大程度上甚至优于就版本的windows系统。（windows 10现在支持了直接在windows update里安装驱动，让人感觉相见恨晚。并且作为一个商业系统，其支持的硬件还是要多于Ubuntu的）\n\n**版本特征**：采用传统的版本号升级的模式，每年4月和10月更新一个版本。每隔两年的4月更新LTS版，即`长期支持版`。长期支持版大约维护5年左右的时间，而10月发布的`普通版`大约维护9个月的时间。\n\n这里在简单介绍一下`长期支持版`和`普通版`。之所以会有版本的分化，就是因为Linux系统的软件管理依靠包依赖解决，而在传统升级模式中，各版本的包依赖关系是独立的，即在当前以来关系下无论如何升级你的软件它都只能在当前的系统版本停留，而不会升级系统版本。\n\n长期支持版顾名思义就是一种比较稳定的版本，软件版本一般不会太新。并且长期受到其维护组织或公司的维护，在生产环境中，经常使用这种版本。而普通版更像一种给发烧友们体验的版本，软件版本会新一些，在网上发布之后，在社区或者用户们之间测试过之后会修复可能存在的很多bug，并且将新特性试验完成投入下一个长期支持版中。而对此我个人的建议是这样的：\n\n如果你是一个追求稳定工作环境的人：\n\n> 比如你需要让机器在公司使用，或者作为你日常的工作机器。我的建议是请使用长期支持版，原因不尽在于长期支持版比较稳定，更重要的是很多第三方软件对长期支持版的支持状况明显好于普通版。比如genymotion，swift等，它们往往只针对长期支持版和最新的普通版发行，并且只针对Ubuntu系统提供安装包。所以说作为一台工作机的话，安装最新的长期支持版是最好的选择。\n\n而如果你是一个追求新特性，新软件的人：\n\n> 即时更新的普通版可能更适合你，但最适合你的可能不是ubuntu系统，因为它的软件版本并不够新。我相信如果你想追求新特性新软件的话，你一定也有能力处理它们可能存在的问题。因此，Arch Linux 或者 Fedora 应该是你更好的选择。\n\n**家族特征**：Ubuntu的上游是Debian，并且使用deb包，总体来讲稳定性是还不错的。而随着Ubuntu如火如荼的发展，Ubuntu也趋向于自成一体，很多软件是Ubuntu独有的，而且其目录结构里也大肆书写了诸如`Ubuntu`之类的词，这样也导致很多软件只能在Ubuntu上运行。\n\n**使用体验**：之前就说过，当前体验最好的Linux系统。但是它有一个显著的问题就是如果你安装了一些软件，尤其是没有使用`apt-get命令`安装的时候，系统有些时候会发生错误。这并不会让你的电脑崩溃，但是它会很心烦的报错。经常需要关闭系统报错才能安静的使用，可如果你是个强迫症无法忍受这个情况的话，那么大多数情况下你需要重装系统了，因为你将很难找到错误的原因。\n\n##### Ubuntu-GNOME\n\n从文章的目录结构和名字也能看出来，这是ubuntu系统的一个衍生版。它是ubuntu官方推出的一个版本，采用`GNOME`桌面环境。这里要明确的是普通的Ubuntu版本使用的是`Unity`桌面环境。同样下面的几个章节也将介绍这种换汤不换药的Ubuntu系统，都只是换一下桌面环境而已，本文将更关注于其体验，而非系统本身，进行快速的介绍。\n\n关于`GNOME`桌面环境的介绍如下：\n\n由于其底层还是Ubuntu，就没什么好讲的了。\n\n**版本特征**：跟随ubuntu的更新发布，包括长期支持版和普通版，都有对应的Ubuntu-GNOME发布，其系统版本久没什么可关注的了。而值得关注的是其携带的GNOME桌面环境的版本，其携带GNOME版本是很新的，一般是其发布时的最新版。但是它有一个问题，就是其GNOME版本似乎并不会在日后升级，所以想在新的GNOME桌面环境发布后体验新的特性的话有可能就要使用PPA上GNOME team的源来安装，而这听上去并不优雅。\n\n**家族特征**：Ubuntu家族的一个分支，使用还是比较广泛的，没什么好说的。\n\n**使用体验**：谈到体验首先要明确一个问题，什么样的用户会来使用这个系统？其它的Ubuntu衍生版也面临这个问题。我总结了一下大概分为以下几类：\n\n* 不喜欢unity桌面环境，但因为各种原因，不想折腾其它发行版。\n* 技术有限，标新立异，又离不开Ubuntu的温床。\n* 无法忍受unity，日常使用其它发行版，但因为软件或其它需要必须使用Ubuntu系统。\n\n以上提到了一点：`无法忍受unity桌面`\n\n其实，实际上unity招人恨的原因主要是其丑陋的审美，作为稳定性来讲还是不错的，尤其是目前看来它是对高分屏支持的最好的桌面环境。但它长得丑，这是不好的。。。就我个人来讲还是可以接受的，但这只停留在`unity7`也就是当前版本的unity桌面环境。而正在开发中的`unity8`桌面环境的审美我是无法忍受的，希望它只是正在开发中的一个草稿吧。\n\n那话说回来，Ubuntu-GNOME的体验如何我认为还是不错的，ubuntu家族的字体调教一向不错，整个系统的美观度很好。不怎么需要自己折腾就能用了，这还是非常方便的。但是有一点不好的是其GNOME桌面环境的版本不够新，对于乐意于尝鲜的用户来讲，这并不是一个好消息。\n\n从我个人来讲，是比较推荐GNOME桌面环境的，因为其整体比较简洁美观，而且相对稳定，毕竟后面有`Red Hat`这个公司在做支撑，也是RHEL的默认桌面环境。\n\n##### Kubuntu\n\n与Ubuntu-GNOME一样是官方支持的衍生版，采用`KDE桌面环境`\n\n关于kde的介绍\n\n**版本特征**：这里值得一提的是，Kubuntu项目的名声并不太好，因为在公司内部，Kubuntu只有一个人在维护，而且由于一些历史和能力原因，这个版本bug比较多。由于我本人不喜欢KDE桌面，所以我不太关注这个版本。只使用过一小段时间，期间发生了很多bug，这不光和Kubuntu有关系，主要是KDE桌面环境比较臃肿复杂， 其本身bug也比较多。\n\n**家族特征**：Ubuntu家族的一个分支，KDE爱好者的一个选择，没什么好说的。\n\n**使用体验**：KDE桌面环境是个很有意思的桌面环境，它由C++和Qt写成。得益于Qt的动画性能非常好，KDE的视觉动画也非常多，窗口的最大化、最小化、弹窗都有非常炫酷的动画。但是也是因为这个，导致它的体积比较庞大，在启动时要加载比较长的时间。而另外一点不太好的地方是KDE的可定制性太强，导致它的UI上有非常多的按钮，看上去一副工程师审美的感觉。最后还要提到一下它bug比较多的事实，我在使用中其实遇到的最显著的情况就是跳转到根目录后系统会立即卡死，还有系统在使用较长一段时间后会卡顿或卡死，看上去像是显存溢出。\n\n我从个人的角度讲，不太推荐KDE桌面环境，但是如果你对炫酷动画非常感兴趣，而且电脑配置相对较好的，你可以尝试。关于bug这一点，其实KDE也没有特别夸张。\n\n##### Xubuntu\n\n官方支持的衍生版，采用`Xfce桌面环境`\n\n关于Xfce的介绍\n\nXfce基于GTK2，它比较简洁，没有花哨的效果，而从审美上讲它还算可以接受的，加上一些主题之后还是能表现的很好的。另外Linus大神也\"官方\"地推荐Xfce，但是众口难调，好不好还是自己用过才知道，从我的角度来讲，我是不太喜欢的，因为它有点过于简洁了，在我那台Xeon CPU，gtx660显卡的电脑上运行的话实在是有点暴遣天物。\n\n**版本特征**：ubuntu的官方flavor，我个人是没怎么用过这个版本的。其实并不会有Linux的新手会直接上手Xfce的，因为新手玩Linux往往都停留在折腾theme这种层面上。Xfce这种桌面环境通常会跑在配置比较差的计算机上，如学习机或者老电脑。也有一些人会主动选择它，主要是觉得它简洁高效，能提升工作效率，这类人一般都是大神级别的，我相信他们的经验要比我多的多，也不需要我来介绍这些。\n\n**家族特征**：Ubuntu家族的一个分支，Xfce爱好者的一个选择，没什么好说的。\n\n**使用体验**：其实我对这个版本的使用体验可能连十分钟都不到，就是从网上下载下来然后烧录到U盘里在liveCD中体验了一下，实在是觉得太过简洁，对不起我的电脑就放弃了。不过这并不影响它的名声，况且使用的GTK这种几乎可以被定义为Linux Native的框架为根基，能保证它的兼容性和易用性。\n\n##### Lubuntu\n\n官方支持的衍生版，采用`Lxde桌面环境`，又是一个轻量级桌面环境的版本，我是完全没有用过这个版本的，所以在这里也不多说了，可能后期有功夫的话来补充一下吧。\n\n#### Elementary OS\n\n大名鼎鼎的EOS，被誉为`最美Linux发行版`的操作系统，我也是用过一段时间的，从审美的角度上讲我是认同这个发行版的。从UI的细致程度上讲确实毋庸置疑，有很多的小动画，用起来也非常舒服，尤其是如果你是一个Mac用户的话，你能在这里找到很多OS X的影子。自带的应用也是做的比较小巧精致，看上去挺舒服的。而其系统本质是基于ubuntu的，目前的 Elementary OS 是基于ubuntu 14.04 LTS版的。\n\n### Red Hat\n\n#### RHEL\n\n#### Fedora\n\n##### Korora\n\n#### Cent OS\n\n### OpenSUSE\n\n### Arch Linux\n\n#### Manjaro\n\n#### Antergos\n\n### Gentoo\n\n### 小众发行版\n\n#### Solus\n\n#### Papyros\n\n#### Parsix\n\n## 认识包管理\n\n## 内核与系统\n\n## 认识 X Server\n\n# 实践篇\n\n## 为什么要学习Linux\n\n## 遇到问题怎么办\n\n## 桌面环境选择\n\n### Unity\n\n### GNOME\n\n### KDE\n\n### Others\n## 源与镜像站\n\n## 推荐软件\n\n## 如何解决常用软件缺乏\n\n## 善用Terminal\n\n## Linux配置当中的坑\n\n### 语言\n\n### 磁盘\n\n### 驱动\n\n### 字体\n\n### 内核\n\n## DIY你的Linux\n\n### 你同意Linux DIY的哲学吗？\n\n### 硬件基础的选择\n\n### 起步\n\n#### 选择一个发行版\n\n#### 让它能够正常而稳定的工作\n\n### 做些锦上添花的事\n\n#### 安装一个桌面环境\n\n#### 配置一个主题\n\n### 进阶\n\n#### 选用定制性更强的发行版\n\n##### Arch Linux\n\n##### Gentoo\n"},{"mdMeta":{"title":"2015年开发学习总结","date":"1455537600","category":"Review"},"abstract":"<p>2015年的技术探索主要集中在前端和少量的后端上，并且针对GNU/Linux还进行了一些研究。\n假期稀里糊涂的折腾了PHP、H5、CSS3之类的前端就技术，开学以后继续深究了前端，对于Unix家族的学习确实让我受益颇深。</p>\n","content":"\n> March 10, 2019 更新：修正了错误的 markdown 标记用法\n\n# 开发环境搭建\n\n因为我没有用过OS X，所以对OS X的开发环境搭建不敢多说，不过Xcode肯定是必备品。\n\n在工具方面Windows和Linux有一些工具是可以共用的，比如：Vargent，各种IDE\n\nIDE选择方面要针对开发项目选择，jetbrains公司的产品是非常不错的。但是体积相对大一些，windows上Visual Studio是万能的，Linux上百花齐放。\n\n## Windows\n\n随着 Unix/Linux 系技术的进一步占领市场，微软系列技术的衰退，windows上的开发环境变得越来越不友好。但是功能大部分都是齐全的，比如Node.js的NPM管理工具，Python的PIP管理工具，在Windows上都是可以使用的，但是他们的思想完全是 Unix/Linux 思想，只是移植到Windows平台而已。所以用着总是感觉不舒服。\n\n但是Visual Studio宇宙第一IDE的地位是不可动摇的，Windows平台的开发工作本身也是十分顺畅的。在Windows上开发你只需要关心代码本身一样，工具选VS就行了。在Windows应用的开发工作这确实是极好的，WPF UWP开发都很顺畅。但是开发别的应用就很难受了，尤其是没有好用的Bash。\n\n所以，Windows上的开发工作依旧是可以进行的，但是如果想更深层次的学习，而不是仅仅接触项目和代码，还是建议使用Unix/Linux，加深自己的理解后再返回来用Windows也是可以的。\n\n## Linux\n\n自古以来作为极客的玩具，Linux就不是一个稳定可靠的供个人使用的操作系统。尽管这些年商业化运行的十分迅速，Ubuntu发展的越来越好，也没法和完全商业化运作的系统比，比如OS X。\n\n想配置出一个稳定、舒心的Linux是一件非常有趣的事情，我的另一篇记录了我最近在折腾Linux上收获的经验。\n\n但是不得不说Linux是个学习编程的非常好的平台，在这里可以学到很多意想不到的知识，并且大大的加深你对操作系统、架构、计算机等等的理解。\n\n我个人在笔记本上使用的是RPM系的Linux发行版：Fedora，笔记本配置如下：\n\n* Dell - XPS 13\n* Fedora Workstation 23\n* Linux Kernal 4.3.5\n* DPI - 150%\n* 桌面环境 - GNOME 3.18\n\n这里为什么要强调DPI呢，因为基于Chromium内核的一些IDE会在高分屏上出现字体渲染模糊的问题，可能是以前旧版本的Chromium内核对DPI支持不好，现在的Chrome在我的Linux上是没有问题的。\n\n我使用的IDE是 Sublime Text 3， 因为它的字体渲染没有问题而且插件很多，方便操作。\n\n另外C++编译器我使用的是GCC，在Linux上没有Visual Studio这种软件，同时编译也不依赖Visual C++，而GCC是最好的选择，其实在实际生产的应用上，GCC也是应用更广的。\n\n## 套件\n\n不同的平台其实只能带来一些IDE上的差别和少量代码的差别，不会影响整体的开发环境。\n\n我现在的套件是这样的：\n\n- 平台：Linux\n- C++开发： Sublime Text 3(IDE) + Bash(终端环境) + GCC(编译器)\n- Web开发： Sublime Text 3(IDE) + Bash(终端环境) + npm(前端开发的包管理) + Virtual Box(虚拟机开服务器) + Vargent(服务器自动配置)\n- Web开发中常用的工具有： npm(包管理器) browser-sync(本地同步调试服务器) gulp(构建工具) webpack(前端构建工具)\n\n# 前端基础\n## HTML5\n知乎上有人对HTML5给出了这样的评价：\n\n> 优势很明显，入门简单，结构简单，平台适应性好。\n\n在开发中常用的是HTML5的一些API和标签，具体要在实践中进行探索。在实践方面，HTML5最大的一个特点就是有特别多的坑，浏览器的兼容性是必须考虑的一个问题。\n\n* Apple平台的Safari（不管是移动版还是桌面版）表现可以说都是最好的\n* Chrome表现也很好，同样安卓和桌面版本都不错，但是Chrome最大的缺点就是版本不统一，有些特性不能很好的推广，在安卓上最为明显，这也和安卓版本碎片化有关。\n\n  而另外一个要命的问题是基于Chromium和Webkit内核的浏览器性能参差不一而且大部分性能极差，国产软件尤为突出。性能差距主要体现在CSS动画上，这会在后面的章节里提到。\n* 在Windows平台上作为IE的替代，Microsoft Edge浏览器表现也非常良好，对大部分标签都兼容，但是有部分带Webkit前缀的标签不支持。另外Edge浏览器只能在Windows 10 平台上运行，目前Windows 10并不普及，所以想在Windows平台上优化用户体验的话依旧要考虑IE浏览器。\n\n## CSS 3\n\n> CSS3 是浏览器兼容性差异的重灾区，主要体现在 专有标签 和 动画性能 上。\n\n**专有标签** 主要指的是带特定前缀的标签，例如：-webkit-。我对这个印象最深的就是假期在做 班级地图 的时候需要重写浏览器滚动条的样式，而只有使用-webkit可以支持这一操作，这样导致在Edge浏览器上无效。\n\n**动画性能** 是另一个让人抓狂的地方，在网页上实现动画效果可以采用以下几个办法：\n* jQuery插件实现js动画\n* Canvas + 手写js 实现动画\n* CSS 3 使用 Transition实现\n    * Transition 中直接调整 Height Top等样式\n    * Transition 中使用 Transform 调整\n\n我们逐个进行分析：\n\n**jQuery插件实现js动画**\n\n 开发难度不高，性能依赖于浏览器的js引擎效率，在桌面端表现一般，在移动端表现很差。并且这是一种比较老土的做法，是在CSS3没有出现之前大部分人采用的方法，现在不应该继续使用。\n\n**Canvas + 手写js 实现动画**\n\n开发难度十分高，Canvas是HTML5新增的标签，采用OpenGL直接进行像素渲染，操作方法是用JS获取一个Canvas的对象，然后对其修改。\n\nCanvas中可以调用的库不是很多，而且js提供的原生方法都比较简单，想实现动画的话要写大量的代码，并且获得的是2d对象，如果要做3D动画还要手动计算三位模型。\n\n但是这种方法的性能表现十分良好，在移动端上复杂动画也可以保持60fps，是动画的实现方式中性能最好的。Flipboard和Apple的网站就大量采用了canvas来助力前端开发。但是Canvas开发中有很多很多的坑，所以不太建议花太多时间学习。\n\n**CSS 3 使用Transition 中直接调整 Height Top等样式**\n\nTransition是CSS3中新加入的关键词，顾名思义，建立一个过渡效果，过渡效果控制的是具体的属性值，采用Height、Top等会直接改变元素样式。\n\n在桌面端表现良好，但是在移动端表现极其糟糕，掉帧明显，原因也很简单，手机性能不够，不能每秒渲染出那么多动画效果。所以不建议使用这种方法。\n\n**CSS 3 使用Transition 中使用 Transform 调整**\n\nTransform也是CSS3中新加入的标签，也可以对元素的位置、大小等进行调整，但是和修改普通样式不同，使用Transform性能良好，在移动端上也没问题，具体原理比较复杂，在这里不多赘述。\n\n综上，所以推荐使用Transition， Transform进行动画的实现。\n\n## JavaScript\n\nJavaScript的发展劲头可谓越来越大，尤其是Node.js的出现使可以一统前端后端。在前端方面主要还是一些前端框架的使用，在后端方面主要是Node.js的应用，分别会在后面的章节提到。\n\n值得一提的是ES2015 即 ES 6的发布对JavaScript的语法环境产生了较大的影响，一定程度上方便了开发工作，但是也带来了学习成本，到目前为止我还没有开始学习ES 2015，开学后会抽出一些时间来看看。\n\n# 前端框架\n\n这里就不对各个框架进行介绍了，只说一些在工程中的坑和开发记录。\n\n## React\n\nReact的出现目前在我看来没有对我的开发工作产生什么实质性的效率提升或者影响，反而是加大了开发的难度。而且目前看来买账的公司并不多，但是组件化确实是开发工作的新思路。\n\n我对React哲学的理解是：\n\n> 利用组件化 高效 而且 不强求 的在多个项目中共用现有的代码。\n\n对于个人开发，如果不是特别追求技术上的时尚的话，普通的网页不要使用这种技术。并且组件化想利用到别的地方的话也不太现实，React-Native之类的框架也没有被广泛证实可用。\n\n现在虽然React - Canvas， React - Native， React - Desktop之类的东西非常多，但是大多处于娱乐阶段，投入不到生产。目前能看到的买账的公司除了Facebook就是Flipboard，Flipboard网页是HTML5+Canvas做的，而且还制作并开源了React - Canvas。整个网页从基础DOM树到Canvas结构都使用了React技术。\n\n说实话对于Flipboard的这种行为我表示不太理解，因为这样追求新技术的做法不太像一个企业的行为，更像一个社区的开发活动。\n\n## Angular\n\nAngular也是助力前端开发的一个框架，由Google主导开发，还有微软TypeScript的支持，可用性也非常强，这主要得益于商业化运营的支持。\n\nAngular的开发工作相对React要友好的多，而且是一个完整的MVC框架，体系比较完整。\n\n## jQuery\n\n传统、典型、实用、必备\n\n广泛证明可用，唯独缺点是比较臃肿。\n\n## Bootstrap\n\n响应式必备，自带CSS特别好用，快速开发必备。\n\n广泛证明可用，也没什么问题。但是关于响应式布局要说一点我的感悟，响应式布局虽然可以适应很多情况，但是移动端和桌面端差距还是非常大的，不能把网站项目强求一定使用响应式，分两个版本构建网站项目很多时候是最优方案。\n\n# 后端语言及框架\n\n在后端方面我没有做过很多项目，框架也只是知道名字，工程方面具体的坑也没踩过，所以只能简单介绍。\n\n## PHP\n\n世界上最好的编程语言，这句话还是有一定道理的。\n\n为什么这样说呢？原因很简单，PHP发展了这么多年，各种学习资料一大堆，网站成品项目一大堆，框架一大堆，稳定性也要好很多。\n\n而最最主要的原因是：\n\n> 代码量少，开发时间短。\n\n\n**ThinkPHP**\n\n最近实习的公司在网站开发商就是用的这个框架，很典型的HTML Components。 这个框架也是企业级框架，我相信稳定性很好，组件化也利于开发分工。\n\n## ASP.NET\n\n和PHP差不多，一个非常传统的技术，不过一直不如PHP应用范围广。这可能和ASP.NET只能在Windows Server服务器上使用有关，毕竟大型的企业级服务器主要是Unix/Linux。\n\n但是现在随着微软拥抱开源的态度越来越开放，ASP.NET 5 也可以在Linux服务器上运行了，但是由于很多历史原因我相信短时间内不会得到大力发展的。而且Linux开源社区那帮人对微软的态度也超级偏激，这对ASP.NET的发展都是不利的。\n\n## Node.js\n\n2015年红的发紫的后端技术，JavaScript一统服务器天下的重要支持。超级炫酷的非阻塞型结构也使其能够应用于高并发网站的开发，据阿里描述，在双十一期间Node.js发挥了很大的作用，在高并发的请求下能够良好的保障服务器不宕机。\n\n但是其开发工作是个让人头疼的事情，由于是单线程，所以大量采用JS回调函数，套个七八层是常事，这可不是想写随便就写出来的，要死很多脑细胞。\n\n## Python\n\nPython独特的语法结构使其代码可读性非常好，而且语言环境也很好，社区支持也非常广泛。非常利于新手学习，而且做服务器也很友好。\n\n**Tornado**\n\nOpenstack采用的框架之一，基于OpenStack修改的美团云当然也用了这个框架，比较简洁，开发也比较友好。\n\n**Django**\n\nOpenstack采用的另一个框架，大而全，缺点是开发慢。\n\n**Flask**\n\n轻量级的web框架，没有更多的认识了。\n\n## Ruby\n\n**Ruby on Rails**\n\nRuby基本和Rails框架的命运绑到一起了，日本人写的这个语言语法非常神奇，但是很友好。尤其是调试的时候直接能在网页上找到终端，这让人十分欢喜。有很多网站也是用Ruby做的后端，可以学习。\n\n# 云计算\n\n这里简述一下几种云计算架构，具体的细节就不谈了。\n\n## IaaS\n\n> IaaS（Infrastructure as a Service），即基础设施即服务。\n\n具体谈实例的话也很简单，VPS就是一种IaaS，即提供给你硬件设施，剩下随便折腾。\n\n## PaaS\n\n> PaaS是Platform-as-a-Service的缩写，意思是平台即服务。\n\n举例，新浪云SAE应用托管，给你提供软件的运行平台，比如阿帕奇服务器。然后把编写好的代码上传就可以直接托管运行了。\n\n## SaaS\n\n> SaaS是Software-as-a-Service（软件即服务）的简称。\n\n举例，OFFICE 365提供软件订阅服务。\n\n\n# 虚拟化\n\n## 桌面级虚拟机\n\n这是个能研究一辈子的东西，我就简单说说两个桌面级虚拟机吧，Virtual Box 和 vMware WorkStation。\n\n\n**Virtual Box**\n\n开源、友好，Vargent等工具也是默认使用Virtual Box的，对各种操作系统支持情况都良好，但是唯一的弱点就是图形性能不好，显存最大128MB。\n\n**vMware WorkStartion**\n\n收费的虚拟机，性能各种好，最主要的是图形性能好。\n\n一般配置服务器的话用Virtual Box就好了，而要高性能图形界面的话叫要后者了，比如模拟OS X\n"}]